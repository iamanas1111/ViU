datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  // Do not change the `id` field, it must be permanent and immutable.
  id                 String              @id @default(cuid())
  // The `username` can be updated anytime by the user.
  // It will acquire the `id` as its default value.
  username           String?             @unique
  email              String?             @unique
  name               String?
  gender             Gender?
  birthDate          DateTime?
  phoneNumber        String?
  address            String?
  bio                String?
  website            String?
  relationshipStatus RelationshipStatus?
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  profilePhoto       String?
  coverPhoto         String?
  post               Post[]
  visualMedia        VisualMedia[]
  postLikes          PostLike[]
  comments           Comment[]
  commentLikes       CommentLike[]
  followers          Follow[]            @relation("following")
  following          Follow[]            @relation("follower")
  activities         Activity[]          @relation("activity")
  notifications      Activity[]          @relation("notification")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follow {
  id          Int    @id @default(autoincrement())
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
}

model Post {
  id          Int           @id @default(autoincrement())
  content     String?
  createdAt   DateTime      @default(now())
  visualMedia VisualMedia[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  postLikes   PostLike[]
  comments    Comment[]
}

model PostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@unique([userId, postId])
}

model Comment {
  id           Int           @id @default(autoincrement())
  content      String
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  commentLikes CommentLike[]

  // If there is a `postId`, it is a comment
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  // If there is a `parentId`, it is a reply
  parent   Comment? @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int?

  // Self-referential relation
  replies Comment[] @relation("Replies")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@unique([userId, commentId])
}

model VisualMedia {
  id         Int             @id @default(autoincrement())
  type       VisualMediaType @default(PHOTO)
  fileName   String
  uploadedAt DateTime        @default(now())
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  post       Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
}

// This Activity model is similar to this approach: https://stackoverflow.com/a/1766371/8434369
// Example:
// * If the activity type is 'CREATE_COMMENT', the `sourceId` must be the `id` of the Comment and
// its `targetId` must be the `id` of the Post that was commented on.
//
// * If the activity type is 'POST_LIKE', the `sourceId` must be the `id` of the PostLike and
// its `targetId` must be the `id` of the liked Post.
//
// * If the activity type is 'COMMENT_MENTION', the `sourceId` must be the `id` of the Comment and
// its `targetId` must be the `id` of the Post that was commented on.
model Activity {
  id                   Int          @id @default(autoincrement())
  createdAt            DateTime     @default(now())
  type                 ActivityType
  sourceId             Int
  targetId             Int?
  sourceUser           User         @relation("activity", fields: [sourceUserId], references: [id], onDelete: Cascade)
  sourceUserId         String
  targetUser           User         @relation("notification", fields: [targetUserId], references: [id], onDelete: Cascade)
  targetUserId         String
  isNotificationActive Boolean      @default(true)
  isNotificationRead   Boolean      @default(false)
}

enum ActivityType {
  CREATE_FOLLOW // CREATE_FOLLOW does not use a `targetId`, only `targetUserId`

  POST_LIKE
  POST_MENTION // POST_MENTION does not use a `targetId`, only `targetUserId`

  CREATE_COMMENT
  COMMENT_MENTION
  COMMENT_LIKE

  CREATE_REPLY
  REPLY_MENTION
  REPLY_LIKE
}

enum VisualMediaType {
  PHOTO
  VIDEO
}

enum Gender {
  FEMALE
  MALE
  NONBINARY
}

enum RelationshipStatus {
  SINGLE
  IN_A_RELATIONSHIP
  ENGAGED
  MARRIED
}
